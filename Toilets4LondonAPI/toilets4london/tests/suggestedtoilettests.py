from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from Toilets4LondonAPI.toilets4london.models import SuggestedToilet


inValidSuggestedToilet = {
    "latitude": "ABCDEFG",
    "longitude": 51.5074,
    "details": "Some text"
}

validSuggestedToilet = {
    "latitude": 51.5074,
    "longitude": 0.1278,
    "details": "Some text"
}

validSuggestedToilet2 = {
    "latitude": 51.5074,
    "longitude": 0.1278,
    "details": "Some text 2"
}

validSuggestedToiletWithExtraField = {
    "latitude": 51.5074,
    "longitude": 0.1278,
    "details": "Some text",
    "date": "12345"
}


class SuggestedToiletTests(APITestCase):

    def setUp(self):
        self.client = APIClient()

    def test_post_suggested_toilet(self):
        response = self.client.post('/suggestedtoilets/', validSuggestedToilet)
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertEqual(SuggestedToilet.objects.filter(id=1).first().details, "Some text")
        self.assertEqual(SuggestedToilet.objects.filter(id=1).first().latitude, 51.5074)
        self.assertEqual(SuggestedToilet.objects.filter(id=1).first().longitude, 0.1278)

    def test_post_suggested_toilet_invalid(self):
        response = self.client.post('/suggestedtoilets/', inValidSuggestedToilet)
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)

    def test_edit_suggested_toilet(self):
        self.client.post('/suggestedtoilets/', validSuggestedToilet)
        response = self.client.put('/suggestedtoilets/1/', validSuggestedToilet2)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(SuggestedToilet.objects.filter(id=1).first().details, "Some text 2")

    def test_date_autogenerated(self):
        response = self.client.post('/suggestedtoilets/', validSuggestedToiletWithExtraField)
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertNotEqual(SuggestedToilet.objects.filter(id=1).first().date, "12345")

